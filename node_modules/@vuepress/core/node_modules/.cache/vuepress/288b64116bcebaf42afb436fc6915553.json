{"remainingRequest":"E:\\code\\github\\myblog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\code\\github\\myblog\\node_modules\\vuepress-theme-vdoing\\util\\index.js","dependencies":[{"path":"E:\\code\\github\\myblog\\node_modules\\vuepress-theme-vdoing\\util\\index.js","mtime":1761792272848},{"path":"E:\\code\\github\\myblog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1761792277856},{"path":"E:\\code\\github\\myblog\\node_modules\\babel-loader\\lib\\index.js","mtime":1761792278496}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}